extends ../layout.jade

block body
    div#body

    script(type="text/javascript", src="/spa-bundle.js")

    div#templates(style="display:none;")
        script(type="text/template")#grid-view-template
            {{buildGridView}}

        script(type="text/template")#root-view-template
            div#errors
            div#main
                span.label Select a maze size
                select#grid-dimension
                    option(selected, value='')
                    option(value='10') 10x10
                    option(value='15') 15x15
                div#main-body

        script(type="text/template")#homepage-template
            div
                p.green hi world, my name is: {{name}}

    script(type="text/javascript").

        (function(window,$,_,handlebars,backbone,marionette,undefined){

            var $templates = $("#templates")

            /*
             * handlebars.buildGridView
             *
             * handlebars helper that will build an html string that
             * represents a grid of divs for the given graph.
             */
            handlebars.registerHelper('buildGridView', function() {

                // 'this' is the GridView model, which is constructed in RootLayout
                var graph = this.graph,
                    grid_size = this.grid_size,
                    nodes = graph.nodes,
                    edges = graph.edges,
                    i = 0,
                    j = 0,
                    html = '';
                
                for(i = 0; i < grid_size; i++){
                    html += '<div class="grid-row">';
                    for(j = 0; j < grid_size; j++){
                        html += "<button type='button' class='grid-node' id='" + j + "," + i + "' ></button>";
                    }
                    html += "</div>";
                }

                return new handlebars.SafeString(html);
            });

            /*
             * createNewGraph
             *
             * helper that creates a square graph with grid_sizeXgrid_size
             * nodes, where each node has an edge to it's neighbors.
             */
            function createNewGraph(grid_size){
                if(!grid_size) return;
                if(grid_size <= 0) return;

                var new_graph = new Graph(),
                    next_node = null,
                    prev_node = null,
                    next_edge = null,
                    i = 0,
                    j = 0;

                for(i = 0; i < grid_size; i++){
                    prev_node = null;
                    next_node = null;
                    for(j = 1; j < grid_size; j++){
                        if(prev_node == null){
                            prev_node = new GraphNode({x: j-1, y: i});
                        }else if(next_node == null){
                            throw new Error("next_node shouldn't be null at this point ...");
                        }else{
                            prev_node = next_node;
                        }

                        next_node = new GraphNode({x: j, y: i});
                        next_edge = new GraphEdge({node_one: prev_node, node_two: next_node});
                        new_graph.add_edge(next_edge);
                    }
                }

                return new_graph;
            }

            var GridView = marionette.ItemView.extend({
                template: handlebars.compile( $templates.find("#grid-view-template").html() ),
                className: 'grid-view',
                serializeData: function(){ return this.model; } // the model is plain JSON for this view ...
            });
            
            var RootLayout = marionette.LayoutView.extend({
                el: '#body',
                template: handlebars.compile( $templates.find('#root-view-template').html() ),
                regions:{
                    'errors': '#errors',
                    'main-body': '#main-body'
                },
                ui:{
                    selectGridDimension: '#grid-dimension'
                },
                events:{
                    'change @ui.selectGridDimension': 'onGridSelectionChange'
                },
                onGridSelectionChange: function(e){
                    var grid_size = e.target.value || '',
                        main_body_region = this.getRegion('main-body');

                    // if user has cleared their grid selection, just blow away
                    // the currently-displayed maze
                    if(grid_size === ''){
                        main_body_region.empty();
                        return;
                    }

                    var grid_size = parseInt(grid_size);

                    if(isNaN(grid_size) || !grid_size) return;

                    var new_view_model = {
                        grid_size: grid_size,
                        graph: createNewGraph(grid_size)
                    };

                    main_body_region.show(new GridView({model: new_view_model}));
                }
            });

            var Homepage = marionette.ItemView.extend({
                template: handlebars.compile( $templates.find("#homepage-template").html() ),
                initialize: function(){
                    this.model = new backbone.Model({name: 'amir'});
                }
            });

            var Application = marionette.Application.extend({
                    initialize: function(options){
                        options = options || {};
                        this.rootView = options.rootView || new RootLayout();
                    }
                }),

                // immediately initialize the app, so it can be used in the router ...
                app = new Application();

            var Router = backbone.Router.extend({
                routes:{
                    "": "home"
                },

                "home": function(){
                    console.log("hi from the home route");
                    app.rootView.render();
                    app.rootView.getRegion('main-body').show(new Homepage());
                }
            });

            app.on('start',function(){
                new Router();
                backbone.history.start();
            });

            app.start();

        })(window,jQuery,_,Handlebars,Backbone,Marionette);
    